@namespace PrimeBlazor

<div class="@containerCssClass @CssClass" style="@Style">
    <div class="p-panel-header">
        <div>
            @if (!String.IsNullOrWhiteSpace(HeaderText))
            {
                <span class="p-panel-title">@HeaderText</span>
            }
            @HeaderTemplate
        </div>
        <div class="p-panel-icons">
            @Icons
            @if (Toggleable) 
            {
                <button class="p-panel-header-icon p-panel-toggler p-link" @onclick="Toggle" type="button"
                    id="@(ariaId + "_header")" aria-controls="@(ariaId + "_content")" aria-expanded="@(!Collapsed)">
                    <span class="@((Collapsed || collapsing) ? "pi pi-plus" : "pi pi-minus")"></span>
                </button>
            }
        </div>
    </div>
    @if(!Collapsed) 
    {
        <div class="@contentCssClass" role="region" id="@(ariaId + "_content")" aria-labelledby="@(ariaId + "_header")">
            <div class="p-panel-content">
                @ChildContent
            </div>
        </div>
    }
</div>

@code {

    [Parameter]
    public string Style { get; set; }

    [Parameter]
    public string CssClass { get; set; }

    [Parameter]
    public string HeaderText { get; set; }

    [Parameter]
    public bool Toggleable { get; set; }

    [Parameter]
    public bool Collapsed { get; set; }

    [Parameter]
    public EventCallback<bool> CollapsedChanged { get; set; }

    [Parameter]
    public RenderFragment HeaderTemplate { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public RenderFragment Icons { get; set; }

    private bool collapsing;

    private bool expanding;

    public async Task Toggle() { 
        if (expanding || collapsing) 
        {
            return;
        }       

        if (Collapsed)
        {
            expanding = true;
            collapsing = false;
            Collapsed = false;
            await Task.Delay(450);
            expanding = false;
        }
        else
        {
            collapsing = true;
            expanding = false;
            await Task.Delay(450);
            collapsing = false;
            Collapsed = true;
        }

        await this.CollapsedChanged.InvokeAsync(this.Collapsed);
    }

    private string containerCssClass 
    {
        get
        {
            string cssClass = "p-panel p-component";
            if (Toggleable)
            {
                cssClass += " p-panel-toggleable";
            }
            return cssClass;
        }
    }

    private string contentCssClass
    {
        get
        {
            string cssClass = "p-toggleable-content";
            if (collapsing)
            {
                cssClass += " p-slideup";
            }

            if (expanding)
            {
                cssClass += " p-slidedown";
            }

            return cssClass;
        }
    }

    private string ariaId 
    {
        get 
        {
            return Guid.NewGuid().ToString();
        }
    }
}